def dfs(graph, start, visited):
    visited[start] = True
    print(start, end=' ')

    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

def bfs(graph, start):
    visited = [False] * len(graph)
    queue = [start]
    visited[start] = True
    result = []

    while queue:
        node = queue.pop(0)
        result.append(node)

        for neighbor in graph[node]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append(neighbor)

    return result

# Example usage:
graph = {
    0: [1, 2],
    1: [0, 2],
    2: [0, 1, 3],
    3: [2]
}

start_vertex = 2
print("Depth-First Search (DFS) Traversal:")
dfs_visited = [False] * len(graph)
dfs_result = dfs(graph, start_vertex, dfs_visited)
print(dfs_result)
print("\nBreadth-First Search (BFS) Traversal:")
bfs_result = bfs(graph, start_vertex)
print(bfs_result)
