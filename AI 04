def is_safe(graph, v, pos, c):
    for i in range(len(graph)):
        if graph[v][i] == 1 and pos[i] == c:
            return False
    return True

def graph_coloring(graph, m, v, pos):
    if v == len(graph):
        return True

    for c in range(1, m + 1):
        if is_safe(graph, v, pos, c):
            pos[v] = c
            if graph_coloring(graph, m, v + 1, pos):
                return True
            pos[v] = 0

    return False

def graph_coloring_solution(graph, m):
    pos = [0] * len(graph)
    if not graph_coloring(graph, m, 0, pos):
        print("Solution does not exist")
    else:
        print("Solution exists: Assigned colors:", end=" ")
        for color in pos:
            print(color, end=" ")
        print()

if __name__ == "__main__":
    num_vertices = int(input("Enter the number of vertices: "))

    graph = []
    print("Enter the adjacency matrix (1 for connected, 0 for not connected):")
    for _ in range(num_vertices):
        row = []
        data = input().split()
        for item in data:
            row.append(int(item))
        graph.append(row)

    num_colors = int(input("Enter the number of colors available: "))

    graph_coloring_solution(graph, num_colors)
