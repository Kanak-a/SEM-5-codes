class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbors):
        self.graph[node] = neighbors

def astar_search(graph, start, goal):
    open_list = [(start, [start])]
    closed_set = set()

    while open_list:
        current_node, path = open_list.pop(0)

        if current_node == goal:
            return path

        closed_set.add(current_node)

        for neighbor in graph[current_node]:  # Access neighbors directly from the graph
            if neighbor not in closed_set:
                open_list.append((neighbor, path + [neighbor]))

    return None

# Create a sample graph using a dictionary
sample_graph = {
    "A": ["B", "C"],
    "B": ["D", "E"],
    "C": ["F"],
    "D": ["G"],
    "E": ["G"],
    "F": ["H"],
    "G": ["H"],
    "H": [],
}

# Find a path from "A" to "H" using A*
start_node = "A"
goal_node = "H"
path = astar_search(sample_graph, start_node, goal_node)

if path:
    print("Path from", start_node, "to", goal_node, ":", "->".join(path))
else:
    print("No path found from", start_node, "to", goal_node)
